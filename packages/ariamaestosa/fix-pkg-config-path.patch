diff -Naur a/SConstruct b/SConstruct
--- a/SConstruct	2015-06-24 05:56:16.556214491 -0500
+++ b/SConstruct	2015-06-24 06:28:15.035258552 -0500
@@ -9,7 +9,7 @@
             does a release build, auto-detects your system
             
         Flags you can pass when calling 'scons' :
-            platform=[macosx/linux/unix/windows/netbsd]
+            platform=[linux]
                 specify platform, if not auto-detected
             config=[debug/release]
                 specify build type
@@ -27,8 +27,6 @@
                 To add other flags to pass when compiling
             LDFLAGS="custom link flags"
                 To add other flags to pass when linking
-            WX_HOME="C:\wxWidgets-2.8.10"
-                for windows only, define the wx home directory
              
         Furthermore, the CXX environment variable is read if it exists, allowing
         you to choose which g++ executable you wish to use.
@@ -192,17 +190,14 @@
 # ---------------------------- Compile -----------------------------
 def compile_Aria(which_os):
 
-    if which_os == "windows":
-        # on Windows ask for MinGW, VC++ can't handle Aria
-        env = Environment(tools = ['mingw'])
-    else:
-        env = Environment()
+    env = Environment(ENV = {'PATH' : os.environ['PATH'],
+                             'PKG_CONFIG_PATH' : os.environ['PKG_CONFIG_PATH']})
     
     env.Decider('MD5-timestamp')
     
     #env.Append(PATH = os.environ['PATH'])
     env['ENV']['PATH'] = os.environ.get('PATH')
-    
+
     if 'CXX' in os.environ:
         print ">> Using compiler " + os.environ['CXX']
         env.Replace(CXX = os.environ['CXX'])
@@ -241,54 +236,8 @@
     # add wxWidgets flags
     # check if user defined his own WXCONFIG, else use defaults
     WXCONFIG = ARGUMENTS.get('WXCONFIG', 'wx-config')
-    if which_os != 'windows':
-        print ">> wx-config : " + WXCONFIG
+    print ">> wx-config : " + WXCONFIG
         
-    if which_os == 'windows':
-    
-        wxHomePath = ARGUMENTS.get('WX_HOME', None)
-        if wxHomePath is None:
-            sys.stderr.write("Please pass WX_HOME for Windows builds")
-            sys.exit(1)
-           
-        winCppFlags = ['-mthreads', '-DHAVE_W32API_H', '-D__WXMSW__', '-D_UNICODE', '-I' + wxHomePath + '\lib\gcc_dll\mswu',
-                       '-I' + wxHomePath + '\include', '-DWXUSINGDLL', '-Wno-ctor-dtor-privacy'] 
-
-        winLdFlags = ['-mthreads', '-L' + wxHomePath + '\lib\gcc_dll', '-lwxbase30u_gcc_custom', '-lwxmsw30u_core_gcc_custom',
-                      '-lwxmsw30u_adv_gcc_custom', '-lwxbase30u_net_gcc_custom', '-lwxtiff', '-lwxjpeg', '-lwxpng',
-                      '-lwxzlib', '-lwxregexu', '-lwxexpat', '-lkernel32', '-luser32', '-lgdi32', '-lcomdlg32', '-lwxregexu', '-lwinspool',
-                      '-lwinmm', '-lshell32', '-lcomctl32', '-lole32', '-loleaut32', '-luuid', '-lrpcrt4', '-ladvapi32', '-lwsock32']
-        
-        print "Build flags :", winCppFlags
-        print "Link flags :", winLdFlags
-        
-        try:
-            command = ["windres", "--include-dir="+wxHomePath+"\include", "--input", "win32\Aria.rc", "--output", "msvcr.o"]
-            print command
-            out = subprocess.Popen(command, stdout = subprocess.PIPE, stderr = subprocess.PIPE).communicate()
-        except:
-            sys.stderr.write("could not execute 'windres', is mingw installed?\n")
-        
-        env.Append(CCFLAGS=winCppFlags)
-        
-        #env.Append(LINKFLAGS=['-mwindows'] + winLdFlags.split())
-        # Ugly hack : wx flags need to appear at the end of the command, but scons doesn't support that, so I need to hack their link command
-        env['LINKCOM']     = '$LINK -o $TARGET $LINKFLAGS $SOURCES $_LIBDIRFLAGS $_LIBFLAGS ' + (' -mwindows ' if build_type == 'release' else '') + ' '.join(winLdFlags)
-    else:
-        wxversion = subprocess.check_output([WXCONFIG,"--version"]).strip()
-        print ">> wxWidgets version : " + wxversion
-        is_wx_3 = (wxversion[0] == '3' or (wxversion[0] == '2' and wxversion[2] == '9'))
-        if is_wx_3:
-            if renderer == "opengl":
-                env.ParseConfig( [WXCONFIG] + ['--cppflags','--libs','core,base,adv,gl,net,webview'])
-            else:
-                env.ParseConfig( [WXCONFIG] + ['--cppflags','--libs','core,base,adv,net,webview'])
-        else:
-            if renderer == "opengl":
-                env.ParseConfig( [WXCONFIG] + ['--cppflags','--libs','core,base,adv,net,gl'])
-            else:
-                env.ParseConfig( [WXCONFIG] + ['--cppflags','--libs','core,net,adv,base'])
-            
     # check build type and init build flags
     if build_type == "debug":
         env.Append(CCFLAGS=['-g','-Wall','-Wextra','-Wno-unused-parameter','-D_MORE_DEBUG_CHECKS','-D_CHECK_FOR_LEAKS','-Wfatal-errors','-DDEBUG=1'])
@@ -327,56 +276,8 @@
 
     use_jack = ARGUMENTS.get('jack', False)
 
-    # OS X (QTKit, CoreAudio, audiotoolbox)
-    if which_os == "macosx":
-
-        print "*** Adding mac source files and libraries"
-        env.Append(CCFLAGS=['-D_MAC_QUICKTIME_COREAUDIO'])
-        sources = sources + ['Src/Midi/Players/Mac/QuickTimeExport.mm','Src/GUI/Machelper.mm']
-        env.Append(CPPPATH=['Src/Midi/Players/Mac'])
-    
-        env.Append(LINKFLAGS = ['-framework','QTKit','-framework', 'Quicktime','-framework','CoreAudio',
-        '-framework','AudioToolbox','-framework','AudioUnit','-framework','AppKit',
-        '-framework','Carbon','-framework','Cocoa','-framework','IOKit','-framework','System',
-        '-framework','CoreMIDI'])
-        
-        if compiler_arch == '32bit':
-            env.Append(CCFLAGS=['-arch','i386'])
-            env.Append(LINKFLAGS = ['-arch','i386'])
-        elif compiler_arch == '64bit':
-            env.Append(CCFLAGS=['-arch','x86_64'])
-            env.Append(LINKFLAGS = ['-arch','x86_64'])
-            
-            
-        if renderer == 'opengl':
-            env.Append(LINKFLAGS = ['-framework','OpenGL','-framework','AGL'])
-        
-    # NetBSD, FreeBSD (Alsa/tiMidity)
-    elif which_os == "netbsd":
-    
-        print "*** Adding Alsa libraries and defines"
-        
-        if renderer == 'opengl':
-            env.Append(CCFLAGS=['-DwxUSE_GLCANVAS=1'])
-        
-        env.Append(CCFLAGS=['-D_ALSA'])
-        
-        env.Append(CPPPATH = ['/usr/include'])
-        
-	# env.Append(LINKFLAGS = ['-Wl,--rpath,/usr/local/lib/'])
-	# env.Append(LIBPATH = ['usr/local/lib/','usr/lib/', '/opt/gnome/lib'])
-        if compiler_arch == '64bit':
-            env.Append(CCFLAGS=['-D__X86_64__'])
-            
-        if renderer == 'opengl':
-            env.Append(LIBS = ['GL', 'GLU'])
-            
-        env.Append(LIBS = ['asound'])
-        env.ParseConfig( 'pkg-config --cflags glib-2.0' )
-        env.ParseConfig( 'pkg-config --libs glib-2.0' )
-        
     # linux (Alsa/tiMidity)
-    elif which_os == "linux":
+    if which_os == "linux":
     
         print "*** Adding Alsa libraries and defines"
         
@@ -384,15 +285,9 @@
             env.Append(CCFLAGS=['-DwxUSE_GLCANVAS=1'])
         
         env.Append(CCFLAGS=['-D_ALSA'])
+
         
-        env.Append(CPPPATH = ['/usr/include'])
-        
-        if compiler_arch == '32bit':
-            env.Append(LINKFLAGS = ['-Wl,--rpath,/usr/local/lib/'])
-            env.Append(LIBPATH = ['usr/local/lib/','usr/lib/', '/opt/gnome/lib'])
-        elif compiler_arch == '64bit':
-            env.Append(LINKFLAGS = ['-Wl,--rpath,/usr/local/lib64/'])
-            env.Append(LIBPATH = ['usr/local/lib64/','usr/lib64/'])
+        if compiler_arch == '64bit':
             env.Append(CCFLAGS=['-D__X86_64__'])
             
         if renderer == 'opengl':
@@ -403,26 +298,6 @@
         env.ParseConfig( 'pkg-config --cflags glib-2.0' )
         env.ParseConfig( 'pkg-config --libs glib-2.0' )
         
-    elif which_os == "unix":
-        print "*** Adding libraries and defines for Unix"
-        
-        if renderer == 'opengl':
-            env.Append(CCFLAGS=['-DwxUSE_GLCANVAS=1'])
-            env.Append(LIBS = ['GL', 'GLU'])
-
-        # default sound driver for Unix, if not explicitely set
-        if ARGUMENTS.get('jack', '!') == '!':
-            use_jack = True
-
-        env.Append(CPPPATH = ['/usr/local/include'])
-        env.Append(LIBPATH = ['/usr/local/lib'])
-        env.ParseConfig('pkg-config --cflags glib-2.0')
-        env.ParseConfig('pkg-config --libs glib-2.0')
-        
-    # Windows
-    elif which_os == "windows":
-        pass
-
     else:
     
         print "\n\n/!\\ Platform ", which_os, " is unknown"
@@ -447,9 +322,6 @@
     # compile to .o
     object_list = env.Object(source = sources)
     
-    if which_os == "windows":
-        object_list = object_list + ["msvcr.o"]
-    
     # link program
     executable = env.Program( target = 'Aria', source = object_list)
 
